"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = StyledPlayer;

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _react = _interopRequireWildcard(require("react"));

var _md = require("react-icons/md");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _progressBar = _interopRequireDefault(require("./progress-bar"));

var _defaultPlayer = _interopRequireDefault(require("./default-player"));

var _core = require("@emotion/core");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

var ProgVolWrapper = (0, _styledBase.default)("div", {
  target: "em1u1jl0",
  label: "ProgVolWrapper"
})(process.env.NODE_ENV === "production" ? {
  name: "tb2reo",
  styles: "position:relative;height:100%;width:128px;padding-left:16px;display:flex;align-items:center;"
} : {
  name: "tb2reo",
  styles: "position:relative;height:100%;width:128px;padding-left:16px;display:flex;align-items:center;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
var VolumeWrapper = (0, _styledBase.default)("div", {
  target: "em1u1jl1",
  label: "VolumeWrapper"
})("position:relative;height:32px;width:30px;flex:0 0 auto;display:flex;align-items:center;justify-content:right;overflow:hidden;transition:width 0.3s ease 0s,background 0.25s ease 0s;border-radius:25px;padding-left:15px;cursor:pointer;&:hover{background:", props => props.color, ";width:65%;margin-left:15px;}&:active{background:", props => props.color, ";width:65%;margin-left:15px;}&:focus-within{background:", props => props.color, ";width:65%;margin-left:15px;.thumb{opacity:1;}}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zdHlsZWQtcGxheWVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXFCZ0MiLCJmaWxlIjoiLi4vc3JjL3N0eWxlZC1wbGF5ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHt1c2VTdGF0ZSwgdXNlUmVmLCB1c2VFZmZlY3R9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7XG4gIE1kUGxheUFycm93IGFzIFBsYXksXG4gIE1kUGF1c2UgYXMgUGF1c2UsXG4gIE1kVm9sdW1lVXAsXG4gIE1kVm9sdW1lT2ZmXG59IGZyb20gJ3JlYWN0LWljb25zL21kJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgUHJvZ3Jlc3NCYXIgZnJvbSAnLi9wcm9ncmVzcy1iYXInO1xuaW1wb3J0IERlZmF1bHRQbGF5ZXIgZnJvbSAnLi9kZWZhdWx0LXBsYXllcic7XG5cbmNvbnN0IFByb2dWb2xXcmFwcGVyID0gc3R5bGVkLmRpdmBcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIHdpZHRoOiAxMjhweDtcbiAgcGFkZGluZy1sZWZ0OiAxNnB4O1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuYDtcblxuY29uc3QgVm9sdW1lV3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgaGVpZ2h0OiAzMnB4O1xuICB3aWR0aDogMzBweDtcbiAgZmxleDogMCAwIGF1dG87XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGp1c3RpZnktY29udGVudDogcmlnaHQ7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIHRyYW5zaXRpb246IHdpZHRoIDAuM3MgZWFzZSAwcywgYmFja2dyb3VuZCAwLjI1cyBlYXNlIDBzO1xuICBib3JkZXItcmFkaXVzOiAyNXB4O1xuICBwYWRkaW5nLWxlZnQ6IDE1cHg7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgJjpob3ZlciB7XG4gICAgYmFja2dyb3VuZDogJHtwcm9wcyA9PiBwcm9wcy5jb2xvcn07XG4gICAgd2lkdGg6IDY1JTtcbiAgICBtYXJnaW4tbGVmdDogMTVweDtcbiAgfVxuICAmOmFjdGl2ZSB7XG4gICAgYmFja2dyb3VuZDogJHtwcm9wcyA9PiBwcm9wcy5jb2xvcn07XG4gICAgd2lkdGg6IDY1JTtcbiAgICBtYXJnaW4tbGVmdDogMTVweDtcbiAgfVxuICAmOmZvY3VzLXdpdGhpbiB7XG4gICAgYmFja2dyb3VuZDogJHtwcm9wcyA9PiBwcm9wcy5jb2xvcn07XG4gICAgd2lkdGg6IDY1JTtcbiAgICBtYXJnaW4tbGVmdDogMTVweDtcbiAgICAudGh1bWIge1xuICAgICAgb3BhY2l0eTogMTtcbiAgICB9XG4gIH1cbmA7XG5cbmNvbnN0IFByb2dyZXNzV3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgaGVpZ2h0OiA1NHB4O1xuICB3aWR0aDogMzJweDtcbiAgZmxleDogMTAgMSBhdXRvO1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICB0cmFuc2l0aW9uOiB3aWR0aCAwLjNzIGVhc2UgMHM7XG4gICY6Zm9jdXMtd2l0aGluIHtcbiAgICAudGh1bWIge1xuICAgICAgdmlzaWJpbGl0eTogdmlzaWJsZTtcbiAgICB9XG4gIH1cbmA7XG5cbmNvbnN0IFBsYXllciA9IHN0eWxlZC5kaXZgXG4gIHBhZGRpbmc6IDAgMTBweDtcbiAgd2lkdGg6ICR7cHJvcHMgPT4gcHJvcHMud2lkdGh9O1xuICBib3JkZXI6ICR7cHJvcHMgPT4gKHByb3BzLmJvcmRlciA/IGAxcHggc29saWQgJHtwcm9wcy5jb2xvcn1gIDogJ25vbmUnKX07XG4gIGJhY2tncm91bmQ6ICR7cHJvcHMgPT4gcHJvcHMuYmFja2dyb3VuZH07XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGNvbG9yOiAke3Byb3BzID0+IHByb3BzLmNvbG9yfTtcbiAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XG4gIG9wYWNpdHk6IDAuODc7XG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgc3ZnIHtcbiAgICBmaWxsOiAke3Byb3BzID0+IHByb3BzLmNvbG9yfTtcbiAgfVxuYDtcblxuY29uc3QgQnV0dG9uID0gc3R5bGVkLmJ1dHRvbmBcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBkaXNwbGF5OiBibG9jaztcbiAgd2lkdGg6IDMycHg7XG4gIGhlaWdodDogMzJweDtcbiAgcGFkZGluZzogMDtcbiAgYm9yZGVyOiBub25lO1xuICBiYWNrZ3JvdW5kOiBub25lO1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgY29sb3I6ICR7cHJvcHMgPT4gcHJvcHMuY29sb3J9O1xuICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kIDAuM3MgZWFzZSAwcztcbiAgJjpob3ZlciB7XG4gICAgYmFja2dyb3VuZDogJHtwcm9wcyA9PiBwcm9wcy5iYWNrZ3JvdW5kfTtcbiAgfVxuICAmOmFjdGl2ZSB7XG4gICAgYmFja2dyb3VuZDogJHtwcm9wcyA9PiBwcm9wcy5iYWNrZ3JvdW5kfTtcbiAgfVxuYDtcblxuY29uc3QgVGltZXMgPSBzdHlsZWQuc3BhbmBcbiAgcGFkZGluZy1sZWZ0OiA0cHg7XG5gO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBTdHlsZWRQbGF5ZXIoe1xuICBhdWRpbyxcbiAgaGlnaGxpZ2h0ID0gJyM1NDhCRjQnLFxuICBiYXNlID0gJyNkZGQnLFxuICBoYXNCb3JkZXIsXG4gIGJhY2tncm91bmQsXG4gIGlzSW52ZXJ0LFxuICBoYXNQbGF5YmFja3NwZWVkLFxuICB3aWR0aCxcbiAgcGxheU9uTG9hZCxcbiAgc3RhdHVzRXZlbnRcbn0pIHtcbiAgY29uc3QgW2F1ZGlvUGxheWVyLCBzZXRBdWRpb1BsYXllcl0gPSB1c2VTdGF0ZShudWxsKTtcbiAgY29uc3QgW3BsYXlpbmcsIHNldFBsYXlpbmddID0gdXNlU3RhdGUobnVsbCk7XG4gIGNvbnN0IFtzdGF0dXMsIHNldFN0YXR1c10gPSB1c2VTdGF0ZShudWxsKTtcbiAgY29uc3QgW3BsYXlpbmdUaW1lLCBzZXRUaW1lXSA9IHVzZVN0YXRlKG51bGwpO1xuICBjb25zdCBbZHVyYXRpb25UaW1lLCBzZXREdXJhdGlvbl0gPSB1c2VTdGF0ZShudWxsKTtcbiAgY29uc3QgW3ZvbHVtZSwgc2V0Vm9sdW1lXSA9IHVzZVN0YXRlKDAuNCk7XG4gIGNvbnN0IFtzcGVlZCwgcm90YXRlU3BlZWRdID0gdXNlU3RhdGUoMSk7XG4gIGNvbnN0IFttdXRlZCwgc2V0TXV0ZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbZG93biwgc2V0TW91c2VEb3duXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW3NjcnViZG93biwgc2V0U2NydWJEb3duXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3Qgdm9sdW1lQmFyID0gdXNlUmVmKG51bGwpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICdtb3VzZXVwJyxcbiAgICAgICgpID0+IHtcbiAgICAgICAgc2V0TW91c2VEb3duKGZhbHNlKTtcbiAgICAgICAgc2V0U2NydWJEb3duKGZhbHNlKTtcbiAgICAgIH0sXG4gICAgICBmYWxzZVxuICAgICk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgJ21vdXNldXAnLFxuICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgc2V0TW91c2VEb3duKGZhbHNlKTtcbiAgICAgICAgICBzZXRTY3J1YkRvd24oZmFsc2UpO1xuICAgICAgICB9LFxuICAgICAgICBmYWxzZVxuICAgICAgKTtcbiAgICB9O1xuICB9LCBbXSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBzdGF0dXNFdmVudChzdGF0dXMpXG4gIH0sIFtzdGF0dXNdKVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgc2V0UGxheWluZyhmYWxzZSlcbiAgICBpZiAoYXVkaW9QbGF5ZXIpIHtcbiAgICAgIGF1ZGlvUGxheWVyLmxvYWQoKVxuICAgIH1cbiAgICBpZiAoYXVkaW9QbGF5ZXIgJiYgcGxheU9uTG9hZCkge1xuICAgICAgYXVkaW9QbGF5ZXIucGxheSgpXG4gICAgfVxuICB9LCBbYXVkaW9dKVxuXG4gIGZ1bmN0aW9uIHRvZ2dsZVBsYXkoKSB7XG4gICAgaWYgKHBsYXlpbmcpIHtcbiAgICAgIGF1ZGlvUGxheWVyLnBhdXNlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGF1ZGlvUGxheWVyLnBsYXkoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB0b2dnbGVTcGVlZCgpIHtcbiAgICBzd2l0Y2ggKHNwZWVkKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHJvdGF0ZVNwZWVkKDEuMik7XG4gICAgICAgIGF1ZGlvUGxheWVyLnBsYXliYWNrUmF0ZSA9IDEuMjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDEuMjpcbiAgICAgICAgcm90YXRlU3BlZWQoMS41KTtcbiAgICAgICAgYXVkaW9QbGF5ZXIucGxheWJhY2tSYXRlID0gMS41O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMS41OlxuICAgICAgICByb3RhdGVTcGVlZCgyKTtcbiAgICAgICAgYXVkaW9QbGF5ZXIucGxheWJhY2tSYXRlID0gMjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIHJvdGF0ZVNwZWVkKDEpO1xuICAgICAgICBhdWRpb1BsYXllci5wbGF5YmFja1JhdGUgPSAxO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJvdGF0ZVNwZWVkKDEpO1xuICAgICAgICBhdWRpb1BsYXllci5wbGF5YmFja1JhdGUgPSAxO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRvZ2dsZU11dGVkKCkge1xuICAgIHNldE11dGVkKCFtdXRlZCk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRUaW1lKHRpbWUpIHtcbiAgICBpZiAoIWlzTmFOKHRpbWUpKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICBNYXRoLmZsb29yKHRpbWUgLyA2MCkgKyAnOicgKyAoJzAnICsgTWF0aC5mbG9vcih0aW1lICUgNjApKS5zbGljZSgtMilcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlVmFsdWVzKHZhbHVlKSB7XG4gICAgYXVkaW9QbGF5ZXIuY3VycmVudFRpbWUgPSB2YWx1ZVswXTtcbiAgICBzZXRUaW1lKHZhbHVlWzBdKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZVZvbHVtZSh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZVswXSkge1xuICAgICAgY29uc3QgYWN0dWFsID0gdmFsdWVbMF07XG4gICAgICBzZXRWb2x1bWUoYWN0dWFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0Vm9sdW1lKHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxQbGF5ZXJcbiAgICAgIHRhYmluZGV4PVwiMFwiXG4gICAgICBjb2xvcj17aXNJbnZlcnQgPyAnI2VlZScgOiAnIzExMSd9XG4gICAgICBib3JkZXI9e2hhc0JvcmRlcn1cbiAgICAgIGJhY2tncm91bmQ9e2JhY2tncm91bmR9XG4gICAgICB3aWR0aD17d2lkdGh9XG4gICAgICBvbk1vdXNlVXA9eygpID0+IHNldE1vdXNlRG93bihmYWxzZSl9XG4gICAgPlxuICAgICAgPERlZmF1bHRQbGF5ZXJcbiAgICAgICAgc2V0QXVkaW9QbGF5ZXI9e3NldEF1ZGlvUGxheWVyfVxuICAgICAgICB2b2x1bWU9e3ZvbHVtZX1cbiAgICAgICAgbXV0ZWQ9e211dGVkfVxuICAgICAgICBzcmM9e2F1ZGlvfVxuICAgICAgICBvblBhdXNlPXsoKSA9PiB7c2V0UGxheWluZyhmYWxzZSk7IHNldFN0YXR1cygncGF1c2VkJyk7fX1cbiAgICAgICAgb25UaW1lVXBkYXRlPXtlID0+IHNldFRpbWUoZS50YXJnZXQuY3VycmVudFRpbWUpfVxuICAgICAgICBvbkR1cmF0aW9uQ2hhbmdlPXtlID0+IHNldER1cmF0aW9uKGUudGFyZ2V0LmR1cmF0aW9uKX1cbiAgICAgICAgb25Wb2x1bWVDaGFuZ2U9e2UgPT4gdXBkYXRlVm9sdW1lKGUudGFyZ2V0LnZvbHVtZSl9XG4gICAgICAgIG9uUGxheWluZz17KCkgPT4ge3NldFBsYXlpbmcodHJ1ZSk7IHNldFN0YXR1cygncGxheWluZycpO319XG4gICAgICAgIG9uRW5kZWQ9eygpID0+IHNldFN0YXR1cygnc3RvcHBlZCcpfVxuICAgICAgLz5cblxuICAgICAgPEJ1dHRvblxuICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgYmFja2dyb3VuZD17aXNJbnZlcnQgPyAnIzIyMicgOiBiYXNlfVxuICAgICAgICBvbkNsaWNrPXsoKSA9PiB0b2dnbGVQbGF5KCl9XG4gICAgICA+XG4gICAgICAgIHtwbGF5aW5nID8gKFxuICAgICAgICAgIDxQYXVzZSBzdHlsZT17e3dpZHRoOiAnMjBweCcsIGhlaWdodDogJzMwcHgnfX0gLz5cbiAgICAgICAgKSA6IChcbiAgICAgICAgICA8UGxheSBzdHlsZT17e3dpZHRoOiAnMjBweCcsIGhlaWdodDogJzMwcHgnfX0gLz5cbiAgICAgICAgKX1cbiAgICAgIDwvQnV0dG9uPlxuICAgICAgPFRpbWVzPlxuICAgICAgICB7YXVkaW9QbGF5ZXIgPyBnZXRUaW1lKHBsYXlpbmdUaW1lKSA6ICcwOjAwJ30gL3snICd9XG4gICAgICAgIHtkdXJhdGlvblRpbWUgPyBnZXRUaW1lKGR1cmF0aW9uVGltZSkgOiAnMDowMCd9XG4gICAgICA8L1RpbWVzPlxuICAgICAgPFByb2dWb2xXcmFwcGVyPlxuICAgICAgICA8UHJvZ3Jlc3NXcmFwcGVyIG9uTW91c2VEb3duPXsoKSA9PiBzZXRTY3J1YkRvd24odHJ1ZSl9PlxuICAgICAgICAgIDxQcm9ncmVzc0JhclxuICAgICAgICAgICAgdmFsdWVzPXtwbGF5aW5nVGltZSA/IFtwbGF5aW5nVGltZV0gOiBbMF19XG4gICAgICAgICAgICBtYXg9e2R1cmF0aW9uVGltZSA/IGR1cmF0aW9uVGltZS50b0ZpeGVkKDApIDogMX1cbiAgICAgICAgICAgIHVwZGF0ZVZhbHVlcz17dXBkYXRlVmFsdWVzfVxuICAgICAgICAgICAgY29sb3I9e2hpZ2hsaWdodH1cbiAgICAgICAgICAgIGlzSW52ZXJ0PXtpc0ludmVydH1cbiAgICAgICAgICAgIGlzSW50ZXJhY3Rpbmc9e3NjcnViZG93bn1cbiAgICAgICAgICAvPlxuICAgICAgICA8L1Byb2dyZXNzV3JhcHBlcj5cbiAgICAgICAgPFZvbHVtZVdyYXBwZXJcbiAgICAgICAgICBjb2xvcj17aXNJbnZlcnQgPyAnIzIyMicgOiBiYXNlfVxuICAgICAgICAgIG9uTW91c2VEb3duPXsoKSA9PiBzZXRNb3VzZURvd24odHJ1ZSl9XG4gICAgICAgICAgb25UcmFuc2l0aW9uRW5kPXsoKSA9PiB7XG4gICAgICAgICAgICB2b2x1bWVCYXIuY3VycmVudC5vbldpbmRvd1Jlc2l6ZSgpO1xuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8UHJvZ3Jlc3NCYXJcbiAgICAgICAgICAgIHJlZj17dm9sdW1lQmFyfVxuICAgICAgICAgICAgdGFiaW5kZXg9XCIwXCJcbiAgICAgICAgICAgIHZhbHVlcz17W3ZvbHVtZV19XG4gICAgICAgICAgICBzdGVwPXswLjAxfVxuICAgICAgICAgICAgbWF4PXsxfVxuICAgICAgICAgICAgdXBkYXRlVmFsdWVzPXt1cGRhdGVWb2x1bWV9XG4gICAgICAgICAgICBpc0ludGVyYWN0aW5nPXtkb3dufVxuICAgICAgICAgICAgY29sb3I9e2hpZ2hsaWdodH1cbiAgICAgICAgICAgIGlzSW52ZXJ0PXtpc0ludmVydH1cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxCdXR0b24gdHlwZT1cImJ1dHRvblwiIGJhY2tncm91bmQ9XCJub25lXCIgb25DbGljaz17KCkgPT4gdG9nZ2xlTXV0ZWQoKX0+XG4gICAgICAgICAgICB7bXV0ZWQgfHwgdm9sdW1lID09PSAwID8gKFxuICAgICAgICAgICAgICA8TWRWb2x1bWVPZmYgc3R5bGU9e3t3aWR0aDogJzMwcHgnLCBoZWlnaHQ6ICcyMHB4J319IC8+XG4gICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICA8TWRWb2x1bWVVcCBzdHlsZT17e3dpZHRoOiAnMzBweCcsIGhlaWdodDogJzIwcHgnfX0gLz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgIDwvVm9sdW1lV3JhcHBlcj5cbiAgICAgIDwvUHJvZ1ZvbFdyYXBwZXI+XG4gICAgICB7aGFzUGxheWJhY2tzcGVlZCAmJiAoXG4gICAgICAgIDxCdXR0b25cbiAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICBiYWNrZ3JvdW5kPXtpc0ludmVydCA/ICcjMjIyJyA6IGJhc2V9XG4gICAgICAgICAgY29sb3I9e2lzSW52ZXJ0ID8gJyNlZWUnIDogJyMxMTEnfVxuICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHRvZ2dsZVNwZWVkKCl9XG4gICAgICAgID5cbiAgICAgICAgICB7c3BlZWQudG9GaXhlZCgxKX1cbiAgICAgICAgPC9CdXR0b24+XG4gICAgICApfVxuICAgIDwvUGxheWVyPlxuICApO1xufVxuXG5TdHlsZWRQbGF5ZXIuZGVmYXVsdFByb3BzID0ge1xuICBoaWdobGlnaHQ6ICcjNTQ4QkY0JyxcbiAgYmFzZTogJyNkZGQnLFxuICBoYXNCb3JkZXI6ICd0cnVlJyxcbiAgYmFja2dyb3VuZDogJ25vbmUnLFxuICBpc0ludmVydDogJ2ZhbHNlJyxcbiAgaGFzUGxheWJhY2tzcGVlZDogJ3RydWUnLFxuICB3aWR0aDogJzI4MHB4JyxcbiAgc3RhdHVzRXZlbnQ6ICgpID0+IHt9XG59O1xuXG5TdHlsZWRQbGF5ZXIucHJvcFR5cGVzID0ge1xuICBhdWRpbzogUHJvcFR5cGVzLmFueS5pc1JlcXVpcmVkLFxuICBoaWdobGlnaHQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGJhc2U6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGhhc0JvcmRlcjogUHJvcFR5cGVzLmJvb2wsXG4gIGJhY2tncm91bmQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGlzSW52ZXJ0OiBQcm9wVHlwZXMuYm9vbCxcbiAgaGFzUGxheWJhY2tzcGVlZDogUHJvcFR5cGVzLmJvb2wsXG4gIHdpZHRoOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBzdGF0dXNFdmVudDogUHJvcFR5cGVzLmZ1bmNcbn07XG4iXX0= */"));
var ProgressWrapper = (0, _styledBase.default)("div", {
  target: "em1u1jl2",
  label: "ProgressWrapper"
})(process.env.NODE_ENV === "production" ? {
  name: "15qdcli",
  styles: "position:relative;height:54px;width:32px;flex:10 1 auto;display:flex;align-items:center;transition:width 0.3s ease 0s;&:focus-within{.thumb{visibility:visible;}}"
} : {
  name: "15qdcli",
  styles: "position:relative;height:54px;width:32px;flex:10 1 auto;display:flex;align-items:center;transition:width 0.3s ease 0s;&:focus-within{.thumb{visibility:visible;}}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zdHlsZWQtcGxheWVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXNEa0MiLCJmaWxlIjoiLi4vc3JjL3N0eWxlZC1wbGF5ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHt1c2VTdGF0ZSwgdXNlUmVmLCB1c2VFZmZlY3R9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7XG4gIE1kUGxheUFycm93IGFzIFBsYXksXG4gIE1kUGF1c2UgYXMgUGF1c2UsXG4gIE1kVm9sdW1lVXAsXG4gIE1kVm9sdW1lT2ZmXG59IGZyb20gJ3JlYWN0LWljb25zL21kJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgUHJvZ3Jlc3NCYXIgZnJvbSAnLi9wcm9ncmVzcy1iYXInO1xuaW1wb3J0IERlZmF1bHRQbGF5ZXIgZnJvbSAnLi9kZWZhdWx0LXBsYXllcic7XG5cbmNvbnN0IFByb2dWb2xXcmFwcGVyID0gc3R5bGVkLmRpdmBcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIHdpZHRoOiAxMjhweDtcbiAgcGFkZGluZy1sZWZ0OiAxNnB4O1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuYDtcblxuY29uc3QgVm9sdW1lV3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgaGVpZ2h0OiAzMnB4O1xuICB3aWR0aDogMzBweDtcbiAgZmxleDogMCAwIGF1dG87XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGp1c3RpZnktY29udGVudDogcmlnaHQ7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIHRyYW5zaXRpb246IHdpZHRoIDAuM3MgZWFzZSAwcywgYmFja2dyb3VuZCAwLjI1cyBlYXNlIDBzO1xuICBib3JkZXItcmFkaXVzOiAyNXB4O1xuICBwYWRkaW5nLWxlZnQ6IDE1cHg7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgJjpob3ZlciB7XG4gICAgYmFja2dyb3VuZDogJHtwcm9wcyA9PiBwcm9wcy5jb2xvcn07XG4gICAgd2lkdGg6IDY1JTtcbiAgICBtYXJnaW4tbGVmdDogMTVweDtcbiAgfVxuICAmOmFjdGl2ZSB7XG4gICAgYmFja2dyb3VuZDogJHtwcm9wcyA9PiBwcm9wcy5jb2xvcn07XG4gICAgd2lkdGg6IDY1JTtcbiAgICBtYXJnaW4tbGVmdDogMTVweDtcbiAgfVxuICAmOmZvY3VzLXdpdGhpbiB7XG4gICAgYmFja2dyb3VuZDogJHtwcm9wcyA9PiBwcm9wcy5jb2xvcn07XG4gICAgd2lkdGg6IDY1JTtcbiAgICBtYXJnaW4tbGVmdDogMTVweDtcbiAgICAudGh1bWIge1xuICAgICAgb3BhY2l0eTogMTtcbiAgICB9XG4gIH1cbmA7XG5cbmNvbnN0IFByb2dyZXNzV3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgaGVpZ2h0OiA1NHB4O1xuICB3aWR0aDogMzJweDtcbiAgZmxleDogMTAgMSBhdXRvO1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICB0cmFuc2l0aW9uOiB3aWR0aCAwLjNzIGVhc2UgMHM7XG4gICY6Zm9jdXMtd2l0aGluIHtcbiAgICAudGh1bWIge1xuICAgICAgdmlzaWJpbGl0eTogdmlzaWJsZTtcbiAgICB9XG4gIH1cbmA7XG5cbmNvbnN0IFBsYXllciA9IHN0eWxlZC5kaXZgXG4gIHBhZGRpbmc6IDAgMTBweDtcbiAgd2lkdGg6ICR7cHJvcHMgPT4gcHJvcHMud2lkdGh9O1xuICBib3JkZXI6ICR7cHJvcHMgPT4gKHByb3BzLmJvcmRlciA/IGAxcHggc29saWQgJHtwcm9wcy5jb2xvcn1gIDogJ25vbmUnKX07XG4gIGJhY2tncm91bmQ6ICR7cHJvcHMgPT4gcHJvcHMuYmFja2dyb3VuZH07XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGNvbG9yOiAke3Byb3BzID0+IHByb3BzLmNvbG9yfTtcbiAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XG4gIG9wYWNpdHk6IDAuODc7XG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgc3ZnIHtcbiAgICBmaWxsOiAke3Byb3BzID0+IHByb3BzLmNvbG9yfTtcbiAgfVxuYDtcblxuY29uc3QgQnV0dG9uID0gc3R5bGVkLmJ1dHRvbmBcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBkaXNwbGF5OiBibG9jaztcbiAgd2lkdGg6IDMycHg7XG4gIGhlaWdodDogMzJweDtcbiAgcGFkZGluZzogMDtcbiAgYm9yZGVyOiBub25lO1xuICBiYWNrZ3JvdW5kOiBub25lO1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgY29sb3I6ICR7cHJvcHMgPT4gcHJvcHMuY29sb3J9O1xuICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kIDAuM3MgZWFzZSAwcztcbiAgJjpob3ZlciB7XG4gICAgYmFja2dyb3VuZDogJHtwcm9wcyA9PiBwcm9wcy5iYWNrZ3JvdW5kfTtcbiAgfVxuICAmOmFjdGl2ZSB7XG4gICAgYmFja2dyb3VuZDogJHtwcm9wcyA9PiBwcm9wcy5iYWNrZ3JvdW5kfTtcbiAgfVxuYDtcblxuY29uc3QgVGltZXMgPSBzdHlsZWQuc3BhbmBcbiAgcGFkZGluZy1sZWZ0OiA0cHg7XG5gO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBTdHlsZWRQbGF5ZXIoe1xuICBhdWRpbyxcbiAgaGlnaGxpZ2h0ID0gJyM1NDhCRjQnLFxuICBiYXNlID0gJyNkZGQnLFxuICBoYXNCb3JkZXIsXG4gIGJhY2tncm91bmQsXG4gIGlzSW52ZXJ0LFxuICBoYXNQbGF5YmFja3NwZWVkLFxuICB3aWR0aCxcbiAgcGxheU9uTG9hZCxcbiAgc3RhdHVzRXZlbnRcbn0pIHtcbiAgY29uc3QgW2F1ZGlvUGxheWVyLCBzZXRBdWRpb1BsYXllcl0gPSB1c2VTdGF0ZShudWxsKTtcbiAgY29uc3QgW3BsYXlpbmcsIHNldFBsYXlpbmddID0gdXNlU3RhdGUobnVsbCk7XG4gIGNvbnN0IFtzdGF0dXMsIHNldFN0YXR1c10gPSB1c2VTdGF0ZShudWxsKTtcbiAgY29uc3QgW3BsYXlpbmdUaW1lLCBzZXRUaW1lXSA9IHVzZVN0YXRlKG51bGwpO1xuICBjb25zdCBbZHVyYXRpb25UaW1lLCBzZXREdXJhdGlvbl0gPSB1c2VTdGF0ZShudWxsKTtcbiAgY29uc3QgW3ZvbHVtZSwgc2V0Vm9sdW1lXSA9IHVzZVN0YXRlKDAuNCk7XG4gIGNvbnN0IFtzcGVlZCwgcm90YXRlU3BlZWRdID0gdXNlU3RhdGUoMSk7XG4gIGNvbnN0IFttdXRlZCwgc2V0TXV0ZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbZG93biwgc2V0TW91c2VEb3duXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW3NjcnViZG93biwgc2V0U2NydWJEb3duXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3Qgdm9sdW1lQmFyID0gdXNlUmVmKG51bGwpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICdtb3VzZXVwJyxcbiAgICAgICgpID0+IHtcbiAgICAgICAgc2V0TW91c2VEb3duKGZhbHNlKTtcbiAgICAgICAgc2V0U2NydWJEb3duKGZhbHNlKTtcbiAgICAgIH0sXG4gICAgICBmYWxzZVxuICAgICk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgJ21vdXNldXAnLFxuICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgc2V0TW91c2VEb3duKGZhbHNlKTtcbiAgICAgICAgICBzZXRTY3J1YkRvd24oZmFsc2UpO1xuICAgICAgICB9LFxuICAgICAgICBmYWxzZVxuICAgICAgKTtcbiAgICB9O1xuICB9LCBbXSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBzdGF0dXNFdmVudChzdGF0dXMpXG4gIH0sIFtzdGF0dXNdKVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgc2V0UGxheWluZyhmYWxzZSlcbiAgICBpZiAoYXVkaW9QbGF5ZXIpIHtcbiAgICAgIGF1ZGlvUGxheWVyLmxvYWQoKVxuICAgIH1cbiAgICBpZiAoYXVkaW9QbGF5ZXIgJiYgcGxheU9uTG9hZCkge1xuICAgICAgYXVkaW9QbGF5ZXIucGxheSgpXG4gICAgfVxuICB9LCBbYXVkaW9dKVxuXG4gIGZ1bmN0aW9uIHRvZ2dsZVBsYXkoKSB7XG4gICAgaWYgKHBsYXlpbmcpIHtcbiAgICAgIGF1ZGlvUGxheWVyLnBhdXNlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGF1ZGlvUGxheWVyLnBsYXkoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB0b2dnbGVTcGVlZCgpIHtcbiAgICBzd2l0Y2ggKHNwZWVkKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHJvdGF0ZVNwZWVkKDEuMik7XG4gICAgICAgIGF1ZGlvUGxheWVyLnBsYXliYWNrUmF0ZSA9IDEuMjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDEuMjpcbiAgICAgICAgcm90YXRlU3BlZWQoMS41KTtcbiAgICAgICAgYXVkaW9QbGF5ZXIucGxheWJhY2tSYXRlID0gMS41O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMS41OlxuICAgICAgICByb3RhdGVTcGVlZCgyKTtcbiAgICAgICAgYXVkaW9QbGF5ZXIucGxheWJhY2tSYXRlID0gMjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIHJvdGF0ZVNwZWVkKDEpO1xuICAgICAgICBhdWRpb1BsYXllci5wbGF5YmFja1JhdGUgPSAxO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJvdGF0ZVNwZWVkKDEpO1xuICAgICAgICBhdWRpb1BsYXllci5wbGF5YmFja1JhdGUgPSAxO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRvZ2dsZU11dGVkKCkge1xuICAgIHNldE11dGVkKCFtdXRlZCk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRUaW1lKHRpbWUpIHtcbiAgICBpZiAoIWlzTmFOKHRpbWUpKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICBNYXRoLmZsb29yKHRpbWUgLyA2MCkgKyAnOicgKyAoJzAnICsgTWF0aC5mbG9vcih0aW1lICUgNjApKS5zbGljZSgtMilcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlVmFsdWVzKHZhbHVlKSB7XG4gICAgYXVkaW9QbGF5ZXIuY3VycmVudFRpbWUgPSB2YWx1ZVswXTtcbiAgICBzZXRUaW1lKHZhbHVlWzBdKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZVZvbHVtZSh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZVswXSkge1xuICAgICAgY29uc3QgYWN0dWFsID0gdmFsdWVbMF07XG4gICAgICBzZXRWb2x1bWUoYWN0dWFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0Vm9sdW1lKHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxQbGF5ZXJcbiAgICAgIHRhYmluZGV4PVwiMFwiXG4gICAgICBjb2xvcj17aXNJbnZlcnQgPyAnI2VlZScgOiAnIzExMSd9XG4gICAgICBib3JkZXI9e2hhc0JvcmRlcn1cbiAgICAgIGJhY2tncm91bmQ9e2JhY2tncm91bmR9XG4gICAgICB3aWR0aD17d2lkdGh9XG4gICAgICBvbk1vdXNlVXA9eygpID0+IHNldE1vdXNlRG93bihmYWxzZSl9XG4gICAgPlxuICAgICAgPERlZmF1bHRQbGF5ZXJcbiAgICAgICAgc2V0QXVkaW9QbGF5ZXI9e3NldEF1ZGlvUGxheWVyfVxuICAgICAgICB2b2x1bWU9e3ZvbHVtZX1cbiAgICAgICAgbXV0ZWQ9e211dGVkfVxuICAgICAgICBzcmM9e2F1ZGlvfVxuICAgICAgICBvblBhdXNlPXsoKSA9PiB7c2V0UGxheWluZyhmYWxzZSk7IHNldFN0YXR1cygncGF1c2VkJyk7fX1cbiAgICAgICAgb25UaW1lVXBkYXRlPXtlID0+IHNldFRpbWUoZS50YXJnZXQuY3VycmVudFRpbWUpfVxuICAgICAgICBvbkR1cmF0aW9uQ2hhbmdlPXtlID0+IHNldER1cmF0aW9uKGUudGFyZ2V0LmR1cmF0aW9uKX1cbiAgICAgICAgb25Wb2x1bWVDaGFuZ2U9e2UgPT4gdXBkYXRlVm9sdW1lKGUudGFyZ2V0LnZvbHVtZSl9XG4gICAgICAgIG9uUGxheWluZz17KCkgPT4ge3NldFBsYXlpbmcodHJ1ZSk7IHNldFN0YXR1cygncGxheWluZycpO319XG4gICAgICAgIG9uRW5kZWQ9eygpID0+IHNldFN0YXR1cygnc3RvcHBlZCcpfVxuICAgICAgLz5cblxuICAgICAgPEJ1dHRvblxuICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgYmFja2dyb3VuZD17aXNJbnZlcnQgPyAnIzIyMicgOiBiYXNlfVxuICAgICAgICBvbkNsaWNrPXsoKSA9PiB0b2dnbGVQbGF5KCl9XG4gICAgICA+XG4gICAgICAgIHtwbGF5aW5nID8gKFxuICAgICAgICAgIDxQYXVzZSBzdHlsZT17e3dpZHRoOiAnMjBweCcsIGhlaWdodDogJzMwcHgnfX0gLz5cbiAgICAgICAgKSA6IChcbiAgICAgICAgICA8UGxheSBzdHlsZT17e3dpZHRoOiAnMjBweCcsIGhlaWdodDogJzMwcHgnfX0gLz5cbiAgICAgICAgKX1cbiAgICAgIDwvQnV0dG9uPlxuICAgICAgPFRpbWVzPlxuICAgICAgICB7YXVkaW9QbGF5ZXIgPyBnZXRUaW1lKHBsYXlpbmdUaW1lKSA6ICcwOjAwJ30gL3snICd9XG4gICAgICAgIHtkdXJhdGlvblRpbWUgPyBnZXRUaW1lKGR1cmF0aW9uVGltZSkgOiAnMDowMCd9XG4gICAgICA8L1RpbWVzPlxuICAgICAgPFByb2dWb2xXcmFwcGVyPlxuICAgICAgICA8UHJvZ3Jlc3NXcmFwcGVyIG9uTW91c2VEb3duPXsoKSA9PiBzZXRTY3J1YkRvd24odHJ1ZSl9PlxuICAgICAgICAgIDxQcm9ncmVzc0JhclxuICAgICAgICAgICAgdmFsdWVzPXtwbGF5aW5nVGltZSA/IFtwbGF5aW5nVGltZV0gOiBbMF19XG4gICAgICAgICAgICBtYXg9e2R1cmF0aW9uVGltZSA/IGR1cmF0aW9uVGltZS50b0ZpeGVkKDApIDogMX1cbiAgICAgICAgICAgIHVwZGF0ZVZhbHVlcz17dXBkYXRlVmFsdWVzfVxuICAgICAgICAgICAgY29sb3I9e2hpZ2hsaWdodH1cbiAgICAgICAgICAgIGlzSW52ZXJ0PXtpc0ludmVydH1cbiAgICAgICAgICAgIGlzSW50ZXJhY3Rpbmc9e3NjcnViZG93bn1cbiAgICAgICAgICAvPlxuICAgICAgICA8L1Byb2dyZXNzV3JhcHBlcj5cbiAgICAgICAgPFZvbHVtZVdyYXBwZXJcbiAgICAgICAgICBjb2xvcj17aXNJbnZlcnQgPyAnIzIyMicgOiBiYXNlfVxuICAgICAgICAgIG9uTW91c2VEb3duPXsoKSA9PiBzZXRNb3VzZURvd24odHJ1ZSl9XG4gICAgICAgICAgb25UcmFuc2l0aW9uRW5kPXsoKSA9PiB7XG4gICAgICAgICAgICB2b2x1bWVCYXIuY3VycmVudC5vbldpbmRvd1Jlc2l6ZSgpO1xuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8UHJvZ3Jlc3NCYXJcbiAgICAgICAgICAgIHJlZj17dm9sdW1lQmFyfVxuICAgICAgICAgICAgdGFiaW5kZXg9XCIwXCJcbiAgICAgICAgICAgIHZhbHVlcz17W3ZvbHVtZV19XG4gICAgICAgICAgICBzdGVwPXswLjAxfVxuICAgICAgICAgICAgbWF4PXsxfVxuICAgICAgICAgICAgdXBkYXRlVmFsdWVzPXt1cGRhdGVWb2x1bWV9XG4gICAgICAgICAgICBpc0ludGVyYWN0aW5nPXtkb3dufVxuICAgICAgICAgICAgY29sb3I9e2hpZ2hsaWdodH1cbiAgICAgICAgICAgIGlzSW52ZXJ0PXtpc0ludmVydH1cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxCdXR0b24gdHlwZT1cImJ1dHRvblwiIGJhY2tncm91bmQ9XCJub25lXCIgb25DbGljaz17KCkgPT4gdG9nZ2xlTXV0ZWQoKX0+XG4gICAgICAgICAgICB7bXV0ZWQgfHwgdm9sdW1lID09PSAwID8gKFxuICAgICAgICAgICAgICA8TWRWb2x1bWVPZmYgc3R5bGU9e3t3aWR0aDogJzMwcHgnLCBoZWlnaHQ6ICcyMHB4J319IC8+XG4gICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICA8TWRWb2x1bWVVcCBzdHlsZT17e3dpZHRoOiAnMzBweCcsIGhlaWdodDogJzIwcHgnfX0gLz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgIDwvVm9sdW1lV3JhcHBlcj5cbiAgICAgIDwvUHJvZ1ZvbFdyYXBwZXI+XG4gICAgICB7aGFzUGxheWJhY2tzcGVlZCAmJiAoXG4gICAgICAgIDxCdXR0b25cbiAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICBiYWNrZ3JvdW5kPXtpc0ludmVydCA/ICcjMjIyJyA6IGJhc2V9XG4gICAgICAgICAgY29sb3I9e2lzSW52ZXJ0ID8gJyNlZWUnIDogJyMxMTEnfVxuICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHRvZ2dsZVNwZWVkKCl9XG4gICAgICAgID5cbiAgICAgICAgICB7c3BlZWQudG9GaXhlZCgxKX1cbiAgICAgICAgPC9CdXR0b24+XG4gICAgICApfVxuICAgIDwvUGxheWVyPlxuICApO1xufVxuXG5TdHlsZWRQbGF5ZXIuZGVmYXVsdFByb3BzID0ge1xuICBoaWdobGlnaHQ6ICcjNTQ4QkY0JyxcbiAgYmFzZTogJyNkZGQnLFxuICBoYXNCb3JkZXI6ICd0cnVlJyxcbiAgYmFja2dyb3VuZDogJ25vbmUnLFxuICBpc0ludmVydDogJ2ZhbHNlJyxcbiAgaGFzUGxheWJhY2tzcGVlZDogJ3RydWUnLFxuICB3aWR0aDogJzI4MHB4JyxcbiAgc3RhdHVzRXZlbnQ6ICgpID0+IHt9XG59O1xuXG5TdHlsZWRQbGF5ZXIucHJvcFR5cGVzID0ge1xuICBhdWRpbzogUHJvcFR5cGVzLmFueS5pc1JlcXVpcmVkLFxuICBoaWdobGlnaHQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGJhc2U6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGhhc0JvcmRlcjogUHJvcFR5cGVzLmJvb2wsXG4gIGJhY2tncm91bmQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGlzSW52ZXJ0OiBQcm9wVHlwZXMuYm9vbCxcbiAgaGFzUGxheWJhY2tzcGVlZDogUHJvcFR5cGVzLmJvb2wsXG4gIHdpZHRoOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBzdGF0dXNFdmVudDogUHJvcFR5cGVzLmZ1bmNcbn07XG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
var Player = (0, _styledBase.default)("div", {
  target: "em1u1jl3",
  label: "Player"
})("padding:0 10px;width:", props => props.width, ";border:", props => props.border ? "1px solid ".concat(props.color) : 'none', ";background:", props => props.background, ";display:flex;align-items:center;color:", props => props.color, ";font-family:sans-serif;opacity:0.87;font-size:14px;svg{fill:", props => props.color, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
var Button = (0, _styledBase.default)("button", {
  target: "em1u1jl4",
  label: "Button"
})("position:relative;display:block;width:32px;height:32px;padding:0;border:none;background:none;cursor:pointer;border-radius:50%;color:", props => props.color, ";transition:background 0.3s ease 0s;&:hover{background:", props => props.background, ";}&:active{background:", props => props.background, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zdHlsZWQtcGxheWVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXFGNEIiLCJmaWxlIjoiLi4vc3JjL3N0eWxlZC1wbGF5ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHt1c2VTdGF0ZSwgdXNlUmVmLCB1c2VFZmZlY3R9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7XG4gIE1kUGxheUFycm93IGFzIFBsYXksXG4gIE1kUGF1c2UgYXMgUGF1c2UsXG4gIE1kVm9sdW1lVXAsXG4gIE1kVm9sdW1lT2ZmXG59IGZyb20gJ3JlYWN0LWljb25zL21kJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgUHJvZ3Jlc3NCYXIgZnJvbSAnLi9wcm9ncmVzcy1iYXInO1xuaW1wb3J0IERlZmF1bHRQbGF5ZXIgZnJvbSAnLi9kZWZhdWx0LXBsYXllcic7XG5cbmNvbnN0IFByb2dWb2xXcmFwcGVyID0gc3R5bGVkLmRpdmBcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIHdpZHRoOiAxMjhweDtcbiAgcGFkZGluZy1sZWZ0OiAxNnB4O1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuYDtcblxuY29uc3QgVm9sdW1lV3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgaGVpZ2h0OiAzMnB4O1xuICB3aWR0aDogMzBweDtcbiAgZmxleDogMCAwIGF1dG87XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGp1c3RpZnktY29udGVudDogcmlnaHQ7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIHRyYW5zaXRpb246IHdpZHRoIDAuM3MgZWFzZSAwcywgYmFja2dyb3VuZCAwLjI1cyBlYXNlIDBzO1xuICBib3JkZXItcmFkaXVzOiAyNXB4O1xuICBwYWRkaW5nLWxlZnQ6IDE1cHg7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgJjpob3ZlciB7XG4gICAgYmFja2dyb3VuZDogJHtwcm9wcyA9PiBwcm9wcy5jb2xvcn07XG4gICAgd2lkdGg6IDY1JTtcbiAgICBtYXJnaW4tbGVmdDogMTVweDtcbiAgfVxuICAmOmFjdGl2ZSB7XG4gICAgYmFja2dyb3VuZDogJHtwcm9wcyA9PiBwcm9wcy5jb2xvcn07XG4gICAgd2lkdGg6IDY1JTtcbiAgICBtYXJnaW4tbGVmdDogMTVweDtcbiAgfVxuICAmOmZvY3VzLXdpdGhpbiB7XG4gICAgYmFja2dyb3VuZDogJHtwcm9wcyA9PiBwcm9wcy5jb2xvcn07XG4gICAgd2lkdGg6IDY1JTtcbiAgICBtYXJnaW4tbGVmdDogMTVweDtcbiAgICAudGh1bWIge1xuICAgICAgb3BhY2l0eTogMTtcbiAgICB9XG4gIH1cbmA7XG5cbmNvbnN0IFByb2dyZXNzV3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgaGVpZ2h0OiA1NHB4O1xuICB3aWR0aDogMzJweDtcbiAgZmxleDogMTAgMSBhdXRvO1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICB0cmFuc2l0aW9uOiB3aWR0aCAwLjNzIGVhc2UgMHM7XG4gICY6Zm9jdXMtd2l0aGluIHtcbiAgICAudGh1bWIge1xuICAgICAgdmlzaWJpbGl0eTogdmlzaWJsZTtcbiAgICB9XG4gIH1cbmA7XG5cbmNvbnN0IFBsYXllciA9IHN0eWxlZC5kaXZgXG4gIHBhZGRpbmc6IDAgMTBweDtcbiAgd2lkdGg6ICR7cHJvcHMgPT4gcHJvcHMud2lkdGh9O1xuICBib3JkZXI6ICR7cHJvcHMgPT4gKHByb3BzLmJvcmRlciA/IGAxcHggc29saWQgJHtwcm9wcy5jb2xvcn1gIDogJ25vbmUnKX07XG4gIGJhY2tncm91bmQ6ICR7cHJvcHMgPT4gcHJvcHMuYmFja2dyb3VuZH07XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGNvbG9yOiAke3Byb3BzID0+IHByb3BzLmNvbG9yfTtcbiAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XG4gIG9wYWNpdHk6IDAuODc7XG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgc3ZnIHtcbiAgICBmaWxsOiAke3Byb3BzID0+IHByb3BzLmNvbG9yfTtcbiAgfVxuYDtcblxuY29uc3QgQnV0dG9uID0gc3R5bGVkLmJ1dHRvbmBcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBkaXNwbGF5OiBibG9jaztcbiAgd2lkdGg6IDMycHg7XG4gIGhlaWdodDogMzJweDtcbiAgcGFkZGluZzogMDtcbiAgYm9yZGVyOiBub25lO1xuICBiYWNrZ3JvdW5kOiBub25lO1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgY29sb3I6ICR7cHJvcHMgPT4gcHJvcHMuY29sb3J9O1xuICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kIDAuM3MgZWFzZSAwcztcbiAgJjpob3ZlciB7XG4gICAgYmFja2dyb3VuZDogJHtwcm9wcyA9PiBwcm9wcy5iYWNrZ3JvdW5kfTtcbiAgfVxuICAmOmFjdGl2ZSB7XG4gICAgYmFja2dyb3VuZDogJHtwcm9wcyA9PiBwcm9wcy5iYWNrZ3JvdW5kfTtcbiAgfVxuYDtcblxuY29uc3QgVGltZXMgPSBzdHlsZWQuc3BhbmBcbiAgcGFkZGluZy1sZWZ0OiA0cHg7XG5gO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBTdHlsZWRQbGF5ZXIoe1xuICBhdWRpbyxcbiAgaGlnaGxpZ2h0ID0gJyM1NDhCRjQnLFxuICBiYXNlID0gJyNkZGQnLFxuICBoYXNCb3JkZXIsXG4gIGJhY2tncm91bmQsXG4gIGlzSW52ZXJ0LFxuICBoYXNQbGF5YmFja3NwZWVkLFxuICB3aWR0aCxcbiAgcGxheU9uTG9hZCxcbiAgc3RhdHVzRXZlbnRcbn0pIHtcbiAgY29uc3QgW2F1ZGlvUGxheWVyLCBzZXRBdWRpb1BsYXllcl0gPSB1c2VTdGF0ZShudWxsKTtcbiAgY29uc3QgW3BsYXlpbmcsIHNldFBsYXlpbmddID0gdXNlU3RhdGUobnVsbCk7XG4gIGNvbnN0IFtzdGF0dXMsIHNldFN0YXR1c10gPSB1c2VTdGF0ZShudWxsKTtcbiAgY29uc3QgW3BsYXlpbmdUaW1lLCBzZXRUaW1lXSA9IHVzZVN0YXRlKG51bGwpO1xuICBjb25zdCBbZHVyYXRpb25UaW1lLCBzZXREdXJhdGlvbl0gPSB1c2VTdGF0ZShudWxsKTtcbiAgY29uc3QgW3ZvbHVtZSwgc2V0Vm9sdW1lXSA9IHVzZVN0YXRlKDAuNCk7XG4gIGNvbnN0IFtzcGVlZCwgcm90YXRlU3BlZWRdID0gdXNlU3RhdGUoMSk7XG4gIGNvbnN0IFttdXRlZCwgc2V0TXV0ZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbZG93biwgc2V0TW91c2VEb3duXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW3NjcnViZG93biwgc2V0U2NydWJEb3duXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3Qgdm9sdW1lQmFyID0gdXNlUmVmKG51bGwpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICdtb3VzZXVwJyxcbiAgICAgICgpID0+IHtcbiAgICAgICAgc2V0TW91c2VEb3duKGZhbHNlKTtcbiAgICAgICAgc2V0U2NydWJEb3duKGZhbHNlKTtcbiAgICAgIH0sXG4gICAgICBmYWxzZVxuICAgICk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgJ21vdXNldXAnLFxuICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgc2V0TW91c2VEb3duKGZhbHNlKTtcbiAgICAgICAgICBzZXRTY3J1YkRvd24oZmFsc2UpO1xuICAgICAgICB9LFxuICAgICAgICBmYWxzZVxuICAgICAgKTtcbiAgICB9O1xuICB9LCBbXSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBzdGF0dXNFdmVudChzdGF0dXMpXG4gIH0sIFtzdGF0dXNdKVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgc2V0UGxheWluZyhmYWxzZSlcbiAgICBpZiAoYXVkaW9QbGF5ZXIpIHtcbiAgICAgIGF1ZGlvUGxheWVyLmxvYWQoKVxuICAgIH1cbiAgICBpZiAoYXVkaW9QbGF5ZXIgJiYgcGxheU9uTG9hZCkge1xuICAgICAgYXVkaW9QbGF5ZXIucGxheSgpXG4gICAgfVxuICB9LCBbYXVkaW9dKVxuXG4gIGZ1bmN0aW9uIHRvZ2dsZVBsYXkoKSB7XG4gICAgaWYgKHBsYXlpbmcpIHtcbiAgICAgIGF1ZGlvUGxheWVyLnBhdXNlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGF1ZGlvUGxheWVyLnBsYXkoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB0b2dnbGVTcGVlZCgpIHtcbiAgICBzd2l0Y2ggKHNwZWVkKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHJvdGF0ZVNwZWVkKDEuMik7XG4gICAgICAgIGF1ZGlvUGxheWVyLnBsYXliYWNrUmF0ZSA9IDEuMjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDEuMjpcbiAgICAgICAgcm90YXRlU3BlZWQoMS41KTtcbiAgICAgICAgYXVkaW9QbGF5ZXIucGxheWJhY2tSYXRlID0gMS41O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMS41OlxuICAgICAgICByb3RhdGVTcGVlZCgyKTtcbiAgICAgICAgYXVkaW9QbGF5ZXIucGxheWJhY2tSYXRlID0gMjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIHJvdGF0ZVNwZWVkKDEpO1xuICAgICAgICBhdWRpb1BsYXllci5wbGF5YmFja1JhdGUgPSAxO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJvdGF0ZVNwZWVkKDEpO1xuICAgICAgICBhdWRpb1BsYXllci5wbGF5YmFja1JhdGUgPSAxO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRvZ2dsZU11dGVkKCkge1xuICAgIHNldE11dGVkKCFtdXRlZCk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRUaW1lKHRpbWUpIHtcbiAgICBpZiAoIWlzTmFOKHRpbWUpKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICBNYXRoLmZsb29yKHRpbWUgLyA2MCkgKyAnOicgKyAoJzAnICsgTWF0aC5mbG9vcih0aW1lICUgNjApKS5zbGljZSgtMilcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlVmFsdWVzKHZhbHVlKSB7XG4gICAgYXVkaW9QbGF5ZXIuY3VycmVudFRpbWUgPSB2YWx1ZVswXTtcbiAgICBzZXRUaW1lKHZhbHVlWzBdKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZVZvbHVtZSh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZVswXSkge1xuICAgICAgY29uc3QgYWN0dWFsID0gdmFsdWVbMF07XG4gICAgICBzZXRWb2x1bWUoYWN0dWFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0Vm9sdW1lKHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxQbGF5ZXJcbiAgICAgIHRhYmluZGV4PVwiMFwiXG4gICAgICBjb2xvcj17aXNJbnZlcnQgPyAnI2VlZScgOiAnIzExMSd9XG4gICAgICBib3JkZXI9e2hhc0JvcmRlcn1cbiAgICAgIGJhY2tncm91bmQ9e2JhY2tncm91bmR9XG4gICAgICB3aWR0aD17d2lkdGh9XG4gICAgICBvbk1vdXNlVXA9eygpID0+IHNldE1vdXNlRG93bihmYWxzZSl9XG4gICAgPlxuICAgICAgPERlZmF1bHRQbGF5ZXJcbiAgICAgICAgc2V0QXVkaW9QbGF5ZXI9e3NldEF1ZGlvUGxheWVyfVxuICAgICAgICB2b2x1bWU9e3ZvbHVtZX1cbiAgICAgICAgbXV0ZWQ9e211dGVkfVxuICAgICAgICBzcmM9e2F1ZGlvfVxuICAgICAgICBvblBhdXNlPXsoKSA9PiB7c2V0UGxheWluZyhmYWxzZSk7IHNldFN0YXR1cygncGF1c2VkJyk7fX1cbiAgICAgICAgb25UaW1lVXBkYXRlPXtlID0+IHNldFRpbWUoZS50YXJnZXQuY3VycmVudFRpbWUpfVxuICAgICAgICBvbkR1cmF0aW9uQ2hhbmdlPXtlID0+IHNldER1cmF0aW9uKGUudGFyZ2V0LmR1cmF0aW9uKX1cbiAgICAgICAgb25Wb2x1bWVDaGFuZ2U9e2UgPT4gdXBkYXRlVm9sdW1lKGUudGFyZ2V0LnZvbHVtZSl9XG4gICAgICAgIG9uUGxheWluZz17KCkgPT4ge3NldFBsYXlpbmcodHJ1ZSk7IHNldFN0YXR1cygncGxheWluZycpO319XG4gICAgICAgIG9uRW5kZWQ9eygpID0+IHNldFN0YXR1cygnc3RvcHBlZCcpfVxuICAgICAgLz5cblxuICAgICAgPEJ1dHRvblxuICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgYmFja2dyb3VuZD17aXNJbnZlcnQgPyAnIzIyMicgOiBiYXNlfVxuICAgICAgICBvbkNsaWNrPXsoKSA9PiB0b2dnbGVQbGF5KCl9XG4gICAgICA+XG4gICAgICAgIHtwbGF5aW5nID8gKFxuICAgICAgICAgIDxQYXVzZSBzdHlsZT17e3dpZHRoOiAnMjBweCcsIGhlaWdodDogJzMwcHgnfX0gLz5cbiAgICAgICAgKSA6IChcbiAgICAgICAgICA8UGxheSBzdHlsZT17e3dpZHRoOiAnMjBweCcsIGhlaWdodDogJzMwcHgnfX0gLz5cbiAgICAgICAgKX1cbiAgICAgIDwvQnV0dG9uPlxuICAgICAgPFRpbWVzPlxuICAgICAgICB7YXVkaW9QbGF5ZXIgPyBnZXRUaW1lKHBsYXlpbmdUaW1lKSA6ICcwOjAwJ30gL3snICd9XG4gICAgICAgIHtkdXJhdGlvblRpbWUgPyBnZXRUaW1lKGR1cmF0aW9uVGltZSkgOiAnMDowMCd9XG4gICAgICA8L1RpbWVzPlxuICAgICAgPFByb2dWb2xXcmFwcGVyPlxuICAgICAgICA8UHJvZ3Jlc3NXcmFwcGVyIG9uTW91c2VEb3duPXsoKSA9PiBzZXRTY3J1YkRvd24odHJ1ZSl9PlxuICAgICAgICAgIDxQcm9ncmVzc0JhclxuICAgICAgICAgICAgdmFsdWVzPXtwbGF5aW5nVGltZSA/IFtwbGF5aW5nVGltZV0gOiBbMF19XG4gICAgICAgICAgICBtYXg9e2R1cmF0aW9uVGltZSA/IGR1cmF0aW9uVGltZS50b0ZpeGVkKDApIDogMX1cbiAgICAgICAgICAgIHVwZGF0ZVZhbHVlcz17dXBkYXRlVmFsdWVzfVxuICAgICAgICAgICAgY29sb3I9e2hpZ2hsaWdodH1cbiAgICAgICAgICAgIGlzSW52ZXJ0PXtpc0ludmVydH1cbiAgICAgICAgICAgIGlzSW50ZXJhY3Rpbmc9e3NjcnViZG93bn1cbiAgICAgICAgICAvPlxuICAgICAgICA8L1Byb2dyZXNzV3JhcHBlcj5cbiAgICAgICAgPFZvbHVtZVdyYXBwZXJcbiAgICAgICAgICBjb2xvcj17aXNJbnZlcnQgPyAnIzIyMicgOiBiYXNlfVxuICAgICAgICAgIG9uTW91c2VEb3duPXsoKSA9PiBzZXRNb3VzZURvd24odHJ1ZSl9XG4gICAgICAgICAgb25UcmFuc2l0aW9uRW5kPXsoKSA9PiB7XG4gICAgICAgICAgICB2b2x1bWVCYXIuY3VycmVudC5vbldpbmRvd1Jlc2l6ZSgpO1xuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8UHJvZ3Jlc3NCYXJcbiAgICAgICAgICAgIHJlZj17dm9sdW1lQmFyfVxuICAgICAgICAgICAgdGFiaW5kZXg9XCIwXCJcbiAgICAgICAgICAgIHZhbHVlcz17W3ZvbHVtZV19XG4gICAgICAgICAgICBzdGVwPXswLjAxfVxuICAgICAgICAgICAgbWF4PXsxfVxuICAgICAgICAgICAgdXBkYXRlVmFsdWVzPXt1cGRhdGVWb2x1bWV9XG4gICAgICAgICAgICBpc0ludGVyYWN0aW5nPXtkb3dufVxuICAgICAgICAgICAgY29sb3I9e2hpZ2hsaWdodH1cbiAgICAgICAgICAgIGlzSW52ZXJ0PXtpc0ludmVydH1cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxCdXR0b24gdHlwZT1cImJ1dHRvblwiIGJhY2tncm91bmQ9XCJub25lXCIgb25DbGljaz17KCkgPT4gdG9nZ2xlTXV0ZWQoKX0+XG4gICAgICAgICAgICB7bXV0ZWQgfHwgdm9sdW1lID09PSAwID8gKFxuICAgICAgICAgICAgICA8TWRWb2x1bWVPZmYgc3R5bGU9e3t3aWR0aDogJzMwcHgnLCBoZWlnaHQ6ICcyMHB4J319IC8+XG4gICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICA8TWRWb2x1bWVVcCBzdHlsZT17e3dpZHRoOiAnMzBweCcsIGhlaWdodDogJzIwcHgnfX0gLz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgIDwvVm9sdW1lV3JhcHBlcj5cbiAgICAgIDwvUHJvZ1ZvbFdyYXBwZXI+XG4gICAgICB7aGFzUGxheWJhY2tzcGVlZCAmJiAoXG4gICAgICAgIDxCdXR0b25cbiAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICBiYWNrZ3JvdW5kPXtpc0ludmVydCA/ICcjMjIyJyA6IGJhc2V9XG4gICAgICAgICAgY29sb3I9e2lzSW52ZXJ0ID8gJyNlZWUnIDogJyMxMTEnfVxuICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHRvZ2dsZVNwZWVkKCl9XG4gICAgICAgID5cbiAgICAgICAgICB7c3BlZWQudG9GaXhlZCgxKX1cbiAgICAgICAgPC9CdXR0b24+XG4gICAgICApfVxuICAgIDwvUGxheWVyPlxuICApO1xufVxuXG5TdHlsZWRQbGF5ZXIuZGVmYXVsdFByb3BzID0ge1xuICBoaWdobGlnaHQ6ICcjNTQ4QkY0JyxcbiAgYmFzZTogJyNkZGQnLFxuICBoYXNCb3JkZXI6ICd0cnVlJyxcbiAgYmFja2dyb3VuZDogJ25vbmUnLFxuICBpc0ludmVydDogJ2ZhbHNlJyxcbiAgaGFzUGxheWJhY2tzcGVlZDogJ3RydWUnLFxuICB3aWR0aDogJzI4MHB4JyxcbiAgc3RhdHVzRXZlbnQ6ICgpID0+IHt9XG59O1xuXG5TdHlsZWRQbGF5ZXIucHJvcFR5cGVzID0ge1xuICBhdWRpbzogUHJvcFR5cGVzLmFueS5pc1JlcXVpcmVkLFxuICBoaWdobGlnaHQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGJhc2U6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGhhc0JvcmRlcjogUHJvcFR5cGVzLmJvb2wsXG4gIGJhY2tncm91bmQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGlzSW52ZXJ0OiBQcm9wVHlwZXMuYm9vbCxcbiAgaGFzUGxheWJhY2tzcGVlZDogUHJvcFR5cGVzLmJvb2wsXG4gIHdpZHRoOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBzdGF0dXNFdmVudDogUHJvcFR5cGVzLmZ1bmNcbn07XG4iXX0= */"));
var Times = (0, _styledBase.default)("span", {
  target: "em1u1jl5",
  label: "Times"
})(process.env.NODE_ENV === "production" ? {
  name: "131wcsq",
  styles: "padding-left:4px;"
} : {
  name: "131wcsq",
  styles: "padding-left:4px;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zdHlsZWQtcGxheWVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXlHeUIiLCJmaWxlIjoiLi4vc3JjL3N0eWxlZC1wbGF5ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHt1c2VTdGF0ZSwgdXNlUmVmLCB1c2VFZmZlY3R9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7XG4gIE1kUGxheUFycm93IGFzIFBsYXksXG4gIE1kUGF1c2UgYXMgUGF1c2UsXG4gIE1kVm9sdW1lVXAsXG4gIE1kVm9sdW1lT2ZmXG59IGZyb20gJ3JlYWN0LWljb25zL21kJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgUHJvZ3Jlc3NCYXIgZnJvbSAnLi9wcm9ncmVzcy1iYXInO1xuaW1wb3J0IERlZmF1bHRQbGF5ZXIgZnJvbSAnLi9kZWZhdWx0LXBsYXllcic7XG5cbmNvbnN0IFByb2dWb2xXcmFwcGVyID0gc3R5bGVkLmRpdmBcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIHdpZHRoOiAxMjhweDtcbiAgcGFkZGluZy1sZWZ0OiAxNnB4O1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuYDtcblxuY29uc3QgVm9sdW1lV3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgaGVpZ2h0OiAzMnB4O1xuICB3aWR0aDogMzBweDtcbiAgZmxleDogMCAwIGF1dG87XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGp1c3RpZnktY29udGVudDogcmlnaHQ7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIHRyYW5zaXRpb246IHdpZHRoIDAuM3MgZWFzZSAwcywgYmFja2dyb3VuZCAwLjI1cyBlYXNlIDBzO1xuICBib3JkZXItcmFkaXVzOiAyNXB4O1xuICBwYWRkaW5nLWxlZnQ6IDE1cHg7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgJjpob3ZlciB7XG4gICAgYmFja2dyb3VuZDogJHtwcm9wcyA9PiBwcm9wcy5jb2xvcn07XG4gICAgd2lkdGg6IDY1JTtcbiAgICBtYXJnaW4tbGVmdDogMTVweDtcbiAgfVxuICAmOmFjdGl2ZSB7XG4gICAgYmFja2dyb3VuZDogJHtwcm9wcyA9PiBwcm9wcy5jb2xvcn07XG4gICAgd2lkdGg6IDY1JTtcbiAgICBtYXJnaW4tbGVmdDogMTVweDtcbiAgfVxuICAmOmZvY3VzLXdpdGhpbiB7XG4gICAgYmFja2dyb3VuZDogJHtwcm9wcyA9PiBwcm9wcy5jb2xvcn07XG4gICAgd2lkdGg6IDY1JTtcbiAgICBtYXJnaW4tbGVmdDogMTVweDtcbiAgICAudGh1bWIge1xuICAgICAgb3BhY2l0eTogMTtcbiAgICB9XG4gIH1cbmA7XG5cbmNvbnN0IFByb2dyZXNzV3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgaGVpZ2h0OiA1NHB4O1xuICB3aWR0aDogMzJweDtcbiAgZmxleDogMTAgMSBhdXRvO1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICB0cmFuc2l0aW9uOiB3aWR0aCAwLjNzIGVhc2UgMHM7XG4gICY6Zm9jdXMtd2l0aGluIHtcbiAgICAudGh1bWIge1xuICAgICAgdmlzaWJpbGl0eTogdmlzaWJsZTtcbiAgICB9XG4gIH1cbmA7XG5cbmNvbnN0IFBsYXllciA9IHN0eWxlZC5kaXZgXG4gIHBhZGRpbmc6IDAgMTBweDtcbiAgd2lkdGg6ICR7cHJvcHMgPT4gcHJvcHMud2lkdGh9O1xuICBib3JkZXI6ICR7cHJvcHMgPT4gKHByb3BzLmJvcmRlciA/IGAxcHggc29saWQgJHtwcm9wcy5jb2xvcn1gIDogJ25vbmUnKX07XG4gIGJhY2tncm91bmQ6ICR7cHJvcHMgPT4gcHJvcHMuYmFja2dyb3VuZH07XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGNvbG9yOiAke3Byb3BzID0+IHByb3BzLmNvbG9yfTtcbiAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XG4gIG9wYWNpdHk6IDAuODc7XG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgc3ZnIHtcbiAgICBmaWxsOiAke3Byb3BzID0+IHByb3BzLmNvbG9yfTtcbiAgfVxuYDtcblxuY29uc3QgQnV0dG9uID0gc3R5bGVkLmJ1dHRvbmBcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBkaXNwbGF5OiBibG9jaztcbiAgd2lkdGg6IDMycHg7XG4gIGhlaWdodDogMzJweDtcbiAgcGFkZGluZzogMDtcbiAgYm9yZGVyOiBub25lO1xuICBiYWNrZ3JvdW5kOiBub25lO1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgY29sb3I6ICR7cHJvcHMgPT4gcHJvcHMuY29sb3J9O1xuICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kIDAuM3MgZWFzZSAwcztcbiAgJjpob3ZlciB7XG4gICAgYmFja2dyb3VuZDogJHtwcm9wcyA9PiBwcm9wcy5iYWNrZ3JvdW5kfTtcbiAgfVxuICAmOmFjdGl2ZSB7XG4gICAgYmFja2dyb3VuZDogJHtwcm9wcyA9PiBwcm9wcy5iYWNrZ3JvdW5kfTtcbiAgfVxuYDtcblxuY29uc3QgVGltZXMgPSBzdHlsZWQuc3BhbmBcbiAgcGFkZGluZy1sZWZ0OiA0cHg7XG5gO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBTdHlsZWRQbGF5ZXIoe1xuICBhdWRpbyxcbiAgaGlnaGxpZ2h0ID0gJyM1NDhCRjQnLFxuICBiYXNlID0gJyNkZGQnLFxuICBoYXNCb3JkZXIsXG4gIGJhY2tncm91bmQsXG4gIGlzSW52ZXJ0LFxuICBoYXNQbGF5YmFja3NwZWVkLFxuICB3aWR0aCxcbiAgcGxheU9uTG9hZCxcbiAgc3RhdHVzRXZlbnRcbn0pIHtcbiAgY29uc3QgW2F1ZGlvUGxheWVyLCBzZXRBdWRpb1BsYXllcl0gPSB1c2VTdGF0ZShudWxsKTtcbiAgY29uc3QgW3BsYXlpbmcsIHNldFBsYXlpbmddID0gdXNlU3RhdGUobnVsbCk7XG4gIGNvbnN0IFtzdGF0dXMsIHNldFN0YXR1c10gPSB1c2VTdGF0ZShudWxsKTtcbiAgY29uc3QgW3BsYXlpbmdUaW1lLCBzZXRUaW1lXSA9IHVzZVN0YXRlKG51bGwpO1xuICBjb25zdCBbZHVyYXRpb25UaW1lLCBzZXREdXJhdGlvbl0gPSB1c2VTdGF0ZShudWxsKTtcbiAgY29uc3QgW3ZvbHVtZSwgc2V0Vm9sdW1lXSA9IHVzZVN0YXRlKDAuNCk7XG4gIGNvbnN0IFtzcGVlZCwgcm90YXRlU3BlZWRdID0gdXNlU3RhdGUoMSk7XG4gIGNvbnN0IFttdXRlZCwgc2V0TXV0ZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbZG93biwgc2V0TW91c2VEb3duXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW3NjcnViZG93biwgc2V0U2NydWJEb3duXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3Qgdm9sdW1lQmFyID0gdXNlUmVmKG51bGwpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICdtb3VzZXVwJyxcbiAgICAgICgpID0+IHtcbiAgICAgICAgc2V0TW91c2VEb3duKGZhbHNlKTtcbiAgICAgICAgc2V0U2NydWJEb3duKGZhbHNlKTtcbiAgICAgIH0sXG4gICAgICBmYWxzZVxuICAgICk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgJ21vdXNldXAnLFxuICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgc2V0TW91c2VEb3duKGZhbHNlKTtcbiAgICAgICAgICBzZXRTY3J1YkRvd24oZmFsc2UpO1xuICAgICAgICB9LFxuICAgICAgICBmYWxzZVxuICAgICAgKTtcbiAgICB9O1xuICB9LCBbXSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBzdGF0dXNFdmVudChzdGF0dXMpXG4gIH0sIFtzdGF0dXNdKVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgc2V0UGxheWluZyhmYWxzZSlcbiAgICBpZiAoYXVkaW9QbGF5ZXIpIHtcbiAgICAgIGF1ZGlvUGxheWVyLmxvYWQoKVxuICAgIH1cbiAgICBpZiAoYXVkaW9QbGF5ZXIgJiYgcGxheU9uTG9hZCkge1xuICAgICAgYXVkaW9QbGF5ZXIucGxheSgpXG4gICAgfVxuICB9LCBbYXVkaW9dKVxuXG4gIGZ1bmN0aW9uIHRvZ2dsZVBsYXkoKSB7XG4gICAgaWYgKHBsYXlpbmcpIHtcbiAgICAgIGF1ZGlvUGxheWVyLnBhdXNlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGF1ZGlvUGxheWVyLnBsYXkoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB0b2dnbGVTcGVlZCgpIHtcbiAgICBzd2l0Y2ggKHNwZWVkKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHJvdGF0ZVNwZWVkKDEuMik7XG4gICAgICAgIGF1ZGlvUGxheWVyLnBsYXliYWNrUmF0ZSA9IDEuMjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDEuMjpcbiAgICAgICAgcm90YXRlU3BlZWQoMS41KTtcbiAgICAgICAgYXVkaW9QbGF5ZXIucGxheWJhY2tSYXRlID0gMS41O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMS41OlxuICAgICAgICByb3RhdGVTcGVlZCgyKTtcbiAgICAgICAgYXVkaW9QbGF5ZXIucGxheWJhY2tSYXRlID0gMjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIHJvdGF0ZVNwZWVkKDEpO1xuICAgICAgICBhdWRpb1BsYXllci5wbGF5YmFja1JhdGUgPSAxO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJvdGF0ZVNwZWVkKDEpO1xuICAgICAgICBhdWRpb1BsYXllci5wbGF5YmFja1JhdGUgPSAxO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRvZ2dsZU11dGVkKCkge1xuICAgIHNldE11dGVkKCFtdXRlZCk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRUaW1lKHRpbWUpIHtcbiAgICBpZiAoIWlzTmFOKHRpbWUpKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICBNYXRoLmZsb29yKHRpbWUgLyA2MCkgKyAnOicgKyAoJzAnICsgTWF0aC5mbG9vcih0aW1lICUgNjApKS5zbGljZSgtMilcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlVmFsdWVzKHZhbHVlKSB7XG4gICAgYXVkaW9QbGF5ZXIuY3VycmVudFRpbWUgPSB2YWx1ZVswXTtcbiAgICBzZXRUaW1lKHZhbHVlWzBdKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZVZvbHVtZSh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZVswXSkge1xuICAgICAgY29uc3QgYWN0dWFsID0gdmFsdWVbMF07XG4gICAgICBzZXRWb2x1bWUoYWN0dWFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0Vm9sdW1lKHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxQbGF5ZXJcbiAgICAgIHRhYmluZGV4PVwiMFwiXG4gICAgICBjb2xvcj17aXNJbnZlcnQgPyAnI2VlZScgOiAnIzExMSd9XG4gICAgICBib3JkZXI9e2hhc0JvcmRlcn1cbiAgICAgIGJhY2tncm91bmQ9e2JhY2tncm91bmR9XG4gICAgICB3aWR0aD17d2lkdGh9XG4gICAgICBvbk1vdXNlVXA9eygpID0+IHNldE1vdXNlRG93bihmYWxzZSl9XG4gICAgPlxuICAgICAgPERlZmF1bHRQbGF5ZXJcbiAgICAgICAgc2V0QXVkaW9QbGF5ZXI9e3NldEF1ZGlvUGxheWVyfVxuICAgICAgICB2b2x1bWU9e3ZvbHVtZX1cbiAgICAgICAgbXV0ZWQ9e211dGVkfVxuICAgICAgICBzcmM9e2F1ZGlvfVxuICAgICAgICBvblBhdXNlPXsoKSA9PiB7c2V0UGxheWluZyhmYWxzZSk7IHNldFN0YXR1cygncGF1c2VkJyk7fX1cbiAgICAgICAgb25UaW1lVXBkYXRlPXtlID0+IHNldFRpbWUoZS50YXJnZXQuY3VycmVudFRpbWUpfVxuICAgICAgICBvbkR1cmF0aW9uQ2hhbmdlPXtlID0+IHNldER1cmF0aW9uKGUudGFyZ2V0LmR1cmF0aW9uKX1cbiAgICAgICAgb25Wb2x1bWVDaGFuZ2U9e2UgPT4gdXBkYXRlVm9sdW1lKGUudGFyZ2V0LnZvbHVtZSl9XG4gICAgICAgIG9uUGxheWluZz17KCkgPT4ge3NldFBsYXlpbmcodHJ1ZSk7IHNldFN0YXR1cygncGxheWluZycpO319XG4gICAgICAgIG9uRW5kZWQ9eygpID0+IHNldFN0YXR1cygnc3RvcHBlZCcpfVxuICAgICAgLz5cblxuICAgICAgPEJ1dHRvblxuICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgYmFja2dyb3VuZD17aXNJbnZlcnQgPyAnIzIyMicgOiBiYXNlfVxuICAgICAgICBvbkNsaWNrPXsoKSA9PiB0b2dnbGVQbGF5KCl9XG4gICAgICA+XG4gICAgICAgIHtwbGF5aW5nID8gKFxuICAgICAgICAgIDxQYXVzZSBzdHlsZT17e3dpZHRoOiAnMjBweCcsIGhlaWdodDogJzMwcHgnfX0gLz5cbiAgICAgICAgKSA6IChcbiAgICAgICAgICA8UGxheSBzdHlsZT17e3dpZHRoOiAnMjBweCcsIGhlaWdodDogJzMwcHgnfX0gLz5cbiAgICAgICAgKX1cbiAgICAgIDwvQnV0dG9uPlxuICAgICAgPFRpbWVzPlxuICAgICAgICB7YXVkaW9QbGF5ZXIgPyBnZXRUaW1lKHBsYXlpbmdUaW1lKSA6ICcwOjAwJ30gL3snICd9XG4gICAgICAgIHtkdXJhdGlvblRpbWUgPyBnZXRUaW1lKGR1cmF0aW9uVGltZSkgOiAnMDowMCd9XG4gICAgICA8L1RpbWVzPlxuICAgICAgPFByb2dWb2xXcmFwcGVyPlxuICAgICAgICA8UHJvZ3Jlc3NXcmFwcGVyIG9uTW91c2VEb3duPXsoKSA9PiBzZXRTY3J1YkRvd24odHJ1ZSl9PlxuICAgICAgICAgIDxQcm9ncmVzc0JhclxuICAgICAgICAgICAgdmFsdWVzPXtwbGF5aW5nVGltZSA/IFtwbGF5aW5nVGltZV0gOiBbMF19XG4gICAgICAgICAgICBtYXg9e2R1cmF0aW9uVGltZSA/IGR1cmF0aW9uVGltZS50b0ZpeGVkKDApIDogMX1cbiAgICAgICAgICAgIHVwZGF0ZVZhbHVlcz17dXBkYXRlVmFsdWVzfVxuICAgICAgICAgICAgY29sb3I9e2hpZ2hsaWdodH1cbiAgICAgICAgICAgIGlzSW52ZXJ0PXtpc0ludmVydH1cbiAgICAgICAgICAgIGlzSW50ZXJhY3Rpbmc9e3NjcnViZG93bn1cbiAgICAgICAgICAvPlxuICAgICAgICA8L1Byb2dyZXNzV3JhcHBlcj5cbiAgICAgICAgPFZvbHVtZVdyYXBwZXJcbiAgICAgICAgICBjb2xvcj17aXNJbnZlcnQgPyAnIzIyMicgOiBiYXNlfVxuICAgICAgICAgIG9uTW91c2VEb3duPXsoKSA9PiBzZXRNb3VzZURvd24odHJ1ZSl9XG4gICAgICAgICAgb25UcmFuc2l0aW9uRW5kPXsoKSA9PiB7XG4gICAgICAgICAgICB2b2x1bWVCYXIuY3VycmVudC5vbldpbmRvd1Jlc2l6ZSgpO1xuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8UHJvZ3Jlc3NCYXJcbiAgICAgICAgICAgIHJlZj17dm9sdW1lQmFyfVxuICAgICAgICAgICAgdGFiaW5kZXg9XCIwXCJcbiAgICAgICAgICAgIHZhbHVlcz17W3ZvbHVtZV19XG4gICAgICAgICAgICBzdGVwPXswLjAxfVxuICAgICAgICAgICAgbWF4PXsxfVxuICAgICAgICAgICAgdXBkYXRlVmFsdWVzPXt1cGRhdGVWb2x1bWV9XG4gICAgICAgICAgICBpc0ludGVyYWN0aW5nPXtkb3dufVxuICAgICAgICAgICAgY29sb3I9e2hpZ2hsaWdodH1cbiAgICAgICAgICAgIGlzSW52ZXJ0PXtpc0ludmVydH1cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxCdXR0b24gdHlwZT1cImJ1dHRvblwiIGJhY2tncm91bmQ9XCJub25lXCIgb25DbGljaz17KCkgPT4gdG9nZ2xlTXV0ZWQoKX0+XG4gICAgICAgICAgICB7bXV0ZWQgfHwgdm9sdW1lID09PSAwID8gKFxuICAgICAgICAgICAgICA8TWRWb2x1bWVPZmYgc3R5bGU9e3t3aWR0aDogJzMwcHgnLCBoZWlnaHQ6ICcyMHB4J319IC8+XG4gICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICA8TWRWb2x1bWVVcCBzdHlsZT17e3dpZHRoOiAnMzBweCcsIGhlaWdodDogJzIwcHgnfX0gLz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgIDwvVm9sdW1lV3JhcHBlcj5cbiAgICAgIDwvUHJvZ1ZvbFdyYXBwZXI+XG4gICAgICB7aGFzUGxheWJhY2tzcGVlZCAmJiAoXG4gICAgICAgIDxCdXR0b25cbiAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICBiYWNrZ3JvdW5kPXtpc0ludmVydCA/ICcjMjIyJyA6IGJhc2V9XG4gICAgICAgICAgY29sb3I9e2lzSW52ZXJ0ID8gJyNlZWUnIDogJyMxMTEnfVxuICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHRvZ2dsZVNwZWVkKCl9XG4gICAgICAgID5cbiAgICAgICAgICB7c3BlZWQudG9GaXhlZCgxKX1cbiAgICAgICAgPC9CdXR0b24+XG4gICAgICApfVxuICAgIDwvUGxheWVyPlxuICApO1xufVxuXG5TdHlsZWRQbGF5ZXIuZGVmYXVsdFByb3BzID0ge1xuICBoaWdobGlnaHQ6ICcjNTQ4QkY0JyxcbiAgYmFzZTogJyNkZGQnLFxuICBoYXNCb3JkZXI6ICd0cnVlJyxcbiAgYmFja2dyb3VuZDogJ25vbmUnLFxuICBpc0ludmVydDogJ2ZhbHNlJyxcbiAgaGFzUGxheWJhY2tzcGVlZDogJ3RydWUnLFxuICB3aWR0aDogJzI4MHB4JyxcbiAgc3RhdHVzRXZlbnQ6ICgpID0+IHt9XG59O1xuXG5TdHlsZWRQbGF5ZXIucHJvcFR5cGVzID0ge1xuICBhdWRpbzogUHJvcFR5cGVzLmFueS5pc1JlcXVpcmVkLFxuICBoaWdobGlnaHQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGJhc2U6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGhhc0JvcmRlcjogUHJvcFR5cGVzLmJvb2wsXG4gIGJhY2tncm91bmQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGlzSW52ZXJ0OiBQcm9wVHlwZXMuYm9vbCxcbiAgaGFzUGxheWJhY2tzcGVlZDogUHJvcFR5cGVzLmJvb2wsXG4gIHdpZHRoOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBzdGF0dXNFdmVudDogUHJvcFR5cGVzLmZ1bmNcbn07XG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

function StyledPlayer(_ref) {
  var {
    audio,
    highlight = '#548BF4',
    base = '#ddd',
    hasBorder,
    background,
    isInvert,
    hasPlaybackspeed,
    width,
    playOnLoad,
    statusEvent
  } = _ref;
  var [audioPlayer, setAudioPlayer] = (0, _react.useState)(null);
  var [playing, setPlaying] = (0, _react.useState)(null);
  var [status, setStatus] = (0, _react.useState)(null);
  var [playingTime, setTime] = (0, _react.useState)(null);
  var [durationTime, setDuration] = (0, _react.useState)(null);
  var [volume, setVolume] = (0, _react.useState)(0.4);
  var [speed, rotateSpeed] = (0, _react.useState)(1);
  var [muted, setMuted] = (0, _react.useState)(false);
  var [down, setMouseDown] = (0, _react.useState)(false);
  var [scrubdown, setScrubDown] = (0, _react.useState)(false);
  var volumeBar = (0, _react.useRef)(null);
  (0, _react.useEffect)(() => {
    // eslint-disable-next-line no-undef
    document.addEventListener('mouseup', () => {
      setMouseDown(false);
      setScrubDown(false);
    }, false);
    return () => {
      // eslint-disable-next-line no-undef
      document.removeEventListener('mouseup', () => {
        setMouseDown(false);
        setScrubDown(false);
      }, false);
    };
  }, []);
  (0, _react.useEffect)(() => {
    statusEvent(status);
  }, [status]);
  (0, _react.useEffect)(() => {
    setPlaying(false);

    if (audioPlayer) {
      audioPlayer.load();
    }

    if (audioPlayer && playOnLoad) {
      audioPlayer.play();
    }
  }, [audio]);

  function togglePlay() {
    if (playing) {
      audioPlayer.pause();
    } else {
      audioPlayer.play();
    }
  }

  function toggleSpeed() {
    switch (speed) {
      case 1:
        rotateSpeed(1.2);
        audioPlayer.playbackRate = 1.2;
        break;

      case 1.2:
        rotateSpeed(1.5);
        audioPlayer.playbackRate = 1.5;
        break;

      case 1.5:
        rotateSpeed(2);
        audioPlayer.playbackRate = 2;
        break;

      case 2:
        rotateSpeed(1);
        audioPlayer.playbackRate = 1;
        break;

      default:
        rotateSpeed(1);
        audioPlayer.playbackRate = 1;
    }
  }

  function toggleMuted() {
    setMuted(!muted);
  }

  function getTime(time) {
    if (!isNaN(time)) {
      return Math.floor(time / 60) + ':' + ('0' + Math.floor(time % 60)).slice(-2);
    }
  }

  function updateValues(value) {
    audioPlayer.currentTime = value[0];
    setTime(value[0]);
  }

  function updateVolume(value) {
    if (value[0]) {
      var actual = value[0];
      setVolume(actual);
    } else {
      setVolume(value);
    }
  }

  return (0, _core.jsx)(Player, {
    tabindex: "0",
    color: isInvert ? '#eee' : '#111',
    border: hasBorder,
    background: background,
    width: width,
    onMouseUp: () => setMouseDown(false)
  }, (0, _core.jsx)(_defaultPlayer.default, {
    setAudioPlayer: setAudioPlayer,
    volume: volume,
    muted: muted,
    src: audio,
    onPause: () => {
      setPlaying(false);
      setStatus('paused');
    },
    onTimeUpdate: e => setTime(e.target.currentTime),
    onDurationChange: e => setDuration(e.target.duration),
    onVolumeChange: e => updateVolume(e.target.volume),
    onPlaying: () => {
      setPlaying(true);
      setStatus('playing');
    },
    onEnded: () => setStatus('stopped')
  }), (0, _core.jsx)(Button, {
    type: "button",
    background: isInvert ? '#222' : base,
    onClick: () => togglePlay()
  }, playing ? (0, _core.jsx)(_md.MdPause, {
    style: {
      width: '20px',
      height: '30px'
    }
  }) : (0, _core.jsx)(_md.MdPlayArrow, {
    style: {
      width: '20px',
      height: '30px'
    }
  })), (0, _core.jsx)(Times, null, audioPlayer ? getTime(playingTime) : '0:00', " /", ' ', durationTime ? getTime(durationTime) : '0:00'), (0, _core.jsx)(ProgVolWrapper, null, (0, _core.jsx)(ProgressWrapper, {
    onMouseDown: () => setScrubDown(true)
  }, (0, _core.jsx)(_progressBar.default, {
    values: playingTime ? [playingTime] : [0],
    max: durationTime ? durationTime.toFixed(0) : 1,
    updateValues: updateValues,
    color: highlight,
    isInvert: isInvert,
    isInteracting: scrubdown
  })), (0, _core.jsx)(VolumeWrapper, {
    color: isInvert ? '#222' : base,
    onMouseDown: () => setMouseDown(true),
    onTransitionEnd: () => {
      volumeBar.current.onWindowResize();
    }
  }, (0, _core.jsx)(_progressBar.default, {
    ref: volumeBar,
    tabindex: "0",
    values: [volume],
    step: 0.01,
    max: 1,
    updateValues: updateVolume,
    isInteracting: down,
    color: highlight,
    isInvert: isInvert
  }), (0, _core.jsx)(Button, {
    type: "button",
    background: "none",
    onClick: () => toggleMuted()
  }, muted || volume === 0 ? (0, _core.jsx)(_md.MdVolumeOff, {
    style: {
      width: '30px',
      height: '20px'
    }
  }) : (0, _core.jsx)(_md.MdVolumeUp, {
    style: {
      width: '30px',
      height: '20px'
    }
  })))), hasPlaybackspeed && (0, _core.jsx)(Button, {
    type: "button",
    background: isInvert ? '#222' : base,
    color: isInvert ? '#eee' : '#111',
    onClick: () => toggleSpeed()
  }, speed.toFixed(1)));
}

StyledPlayer.defaultProps = {
  highlight: '#548BF4',
  base: '#ddd',
  hasBorder: 'true',
  background: 'none',
  isInvert: 'false',
  hasPlaybackspeed: 'true',
  width: '280px',
  statusEvent: () => {}
};
StyledPlayer.propTypes = {
  audio: _propTypes.default.any.isRequired,
  highlight: _propTypes.default.string,
  base: _propTypes.default.string,
  hasBorder: _propTypes.default.bool,
  background: _propTypes.default.string,
  isInvert: _propTypes.default.bool,
  hasPlaybackspeed: _propTypes.default.bool,
  width: _propTypes.default.string,
  statusEvent: _propTypes.default.func
};