"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _feedItem = _interopRequireDefault(require("./feed-item"));

var _videoItem = _interopRequireDefault(require("./video-item"));

var _feedWidget = _interopRequireDefault(require("./feed-widget.css"));

var _dataAdapter = _interopRequireDefault(require("./data-adapter"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var urlBuilder = _dataAdapter.default.urlBuilder,
    getFeed = _dataAdapter.default.getFeed;
var urlRegEx = /^(?:http:\/\/)?(?:https:\/\/)?(?:www\.)?(?:youtube|facebook|dailymotion|soundcloud|vimeo|wistia|mixcloud|twitch)\.com/gi;

class FeedWidget extends _react.default.Component {
  constructor(props) {
    super(props);
    this.state = {
      feedItems: []
    };
  }

  componentDidMount() {
    getFeed(this.props.queryString, this.props.clientConfig).then(response => {
      this.setState({
        feedItems: response.result
      });
    });
  }

  render() {
    var _this$props = this.props,
        title = _this$props.title,
        clientConfig = _this$props.clientConfig;
    var feedItems = this.state.feedItems;
    return _react.default.createElement("div", {
      className: _feedWidget.default.root
    }, _react.default.createElement("header", {
      className: _feedWidget.default.header
    }, _react.default.createElement("h1", {
      className: _feedWidget.default.title
    }, title ? title : 'Media Feed')), _react.default.createElement("ul", {
      className: _feedWidget.default.grid
    }, feedItems.map(feedItem => {
      return feedItem.title ? _react.default.createElement("li", {
        key: feedItem._id
      }, urlRegEx.test(feedItem.externalLink) && !feedItem.videoOptions.noplayer ? _react.default.createElement(_videoItem.default, {
        title: feedItem.title,
        href: feedItem.externalLink,
        byline: feedItem.addtext.byline,
        category: feedItem.category,
        description: feedItem.addtext.description,
        id: feedItem._id,
        videoOptions: feedItem.videoOptions,
        imageURL: urlBuilder(clientConfig ? clientConfig : '').image(feedItem.image).height(360).url()
      }) : _react.default.createElement(_feedItem.default, {
        title: feedItem.title,
        href: feedItem.externalLink,
        target: feedItem.target,
        byline: feedItem.addtext.byline,
        category: feedItem.category,
        description: feedItem.addtext.description,
        videoOptions: feedItem.videoOptions,
        imageURL: urlBuilder(clientConfig ? clientConfig : '').image(feedItem.image).height(360).url()
      })) : null;
    })));
  }

}

exports.default = FeedWidget;
FeedWidget.propTypes = {
  title: _propTypes.default.string.isRequired,
  clientConfig: _propTypes.default.shape({
    projectId: _propTypes.default.string,
    dataset: _propTypes.default.string,
    useCdn: _propTypes.default.boolean
  }).isRequired,
  queryString: _propTypes.default.string.isRequired
};
FeedWidget.defaultProps = {
  posterURL: null,
  hasPlayIcon: false,
  category: null,
  description: null
};